//Open Telemetry forwarder running Zipkin endpoint on 1 node, with a service
@description('Information about what resource is calling this Recipe. Generated by Radius. For more information visit https://docs.radapp.dev/operations/custom-recipes/')
param context object

extension kubernetes with {
  kubeConfig: ''
  namespace: context.runtime.kubernetes.namespace
} as kubernetes

var host = '${svc.metadata.name}.${svc.metadata.namespace}.svc.cluster.local'
var uniqueName = 'otlp-${uniqueString(context.resource.id)}'

var zipkinPort = 9411
var otlpHttpPort = 4318
var otlpGrpcPort = 4317

var readinessProbe = {
  httpGet: {
    path: 'http://localhost/health'
    port: 13133
  }
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 10
  successThreshold: 1
}

@description('The name of the volume to mount the ConfigMap to.')
var volumeName = 'scripts'

var otlpHost = 'localhost'

// Create a ConfigMap with the configuration.json. This is mounted to the container.
resource configMap 'core/ConfigMap@v1' = {
  metadata: {
    name: 'otlp-scripts'
    namespace: context.runtime.kubernetes.namespace
  }
  data: {
    #disable-next-line prefer-interpolation
    'otel-collector-config.yaml': concat('''
    receivers:
      zipkin:
        endpoint: "0.0.0.0:9411"
    extensions:
      health_check:
        path: "/health"
        endpoint: "0.0.0.0:13133"
      pprof:
        endpoint: :1888
      zpages:
        endpoint: :55679
    exporters:
      debug:
        verbosity: basic
      azuremonitor:
        connection_string: "InstrumentationKey=25cb4d8b-5d12-45e5-8007-0e9b6c6a5c15;IngestionEndpoint=https://northeurope-2.in.applicationinsights.azure.com/;LiveEndpoint=https://northeurope.livediagnostics.monitor.azure.com/;ApplicationId=2f51e7eb-f120-4961-8fbd-52905eb88912"
    processors:
      batch:
    service:
      extensions: [pprof, zpages, health_check]
      pipelines:
        traces:
          receivers: [zipkin]
          processors: [batch]
          exporters: [azuremonitor, debug]''')
  }
}

resource otlpCollector 'apps/Deployment@v1' = {
  metadata: {
    name: uniqueName
  }
  spec: {
    replicas: 1
    selector: {
      matchLabels: {
        app: 'otlpcollector'
        resource: context.resource.name
      }
    }
    template: {
      metadata: {
        labels: {
          app: 'otlpcollector'
          resource: context.resource.name
          // Label pods with the application name so `rad run` can find the logs.
          // NOTE: disabled because rad run only lets you see logs from 10 pods
          //'radapp.io/application': context.application == null ? '' : context.application.name
        }
      }
      spec: {
        containers: [
          {
            name: 'otlpcollector'
            image: 'otel/opentelemetry-collector-contrib'
            securityContext: {
              privileged: true
            }
            command: [
              '/otelcol-contrib'
              '--config=/conf/otel-collector-config.yaml'
            ]            
            ports: [
              {
                containerPort: zipkinPort
              }
              {
                containerPort: otlpHttpPort
              }
              {
                containerPort: otlpGrpcPort
              }              
            ]
            volumeMounts: [
              {
                name: volumeName
                mountPath: '/conf/otel-collector-config.yaml'
                subPath: 'otel-collector-config.yaml'
              }
            ]
            #disable-next-line BCP036 //it is in fact allowed to be an integer
            readinessProbe: readinessProbe
          }
        ]
        volumes: [
          {
            name: volumeName
            configMap: {
              name: configMap.metadata.name
            }
          }
        ]
      }
    }
  }
}

resource svc 'core/Service@v1' = {
  metadata: {
    name: uniqueName
    labels: {
      name: uniqueName
    }
  }
  spec: {
    type: 'ClusterIP'
    selector: {
      app: 'otlpcollector'
      resource: context.resource.name
    }
    ports: [
      {
        name: 'grpc'
        port: otlpGrpcPort
      }
      {
        name: 'zipkin'
        port: zipkinPort
      }
      {
        name: 'http'
        port: otlpHttpPort
      }
    ]
  }
}

output result object = {
  // This workaround is needed because the deployment engine omits Kubernetes resources from its output.
  //
  // Once this gap is addressed, users won't need to do this.
  resources: [
    '/planes/kubernetes/local/namespaces/${svc.metadata.namespace}/providers/core/Service/${svc.metadata.name}'
    '/planes/kubernetes/local/namespaces/${svc.metadata.namespace}/providers/core/ConfigMap/${configMap.metadata.name}'
    '/planes/kubernetes/local/namespaces/${otlpCollector.metadata.namespace}/providers/apps/Deployment/${otlpCollector.metadata.name}'
  ]
  values: {
    host: host
    zipkinPort: zipkinPort
    zipkinEndpoint: 'http://${host}:${zipkinPort}/api/v2/spans'
  }
  secrets: {
    //none needed
  }
}

//deploying the recipe can be done by this command:
//rad bicep publish --file otlp_recipe.bicep --target br:acrradius.azurecr.io/recipes/otlp:0.1.0
//rad recipe register otlpRecipe --environment test --resource-type 'Applications.Core/extenders' --template-kind bicep --template-path acrradius.azurecr.io/recipes/otlp:0.1.0 --group test
//rad recipe register otlpRecipe --environment prod --resource-type 'Applications.Core/extenders' --template-kind bicep --template-path acrradius.azurecr.io/recipes/otlp:0.1.0 --group prod
