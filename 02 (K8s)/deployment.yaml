apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
    # Enable these two lines to enable Radius:
    # radapp.io/enabled: 'true'
    # radapp.io/environment: demos
    # Enable this line to enable the Redis connection:
    # radapp.io/connection-redis: 'db'
  generation: 1
  labels:
    demo: demo01
  name: demo  
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      demo: demo01
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        demo: demo01
    spec:
      containers:
      - image: ghcr.io/radius-project/samples/demo:latest
        imagePullPolicy: Always
        name: demo
        ports:
        - containerPort: 3000
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: demo
      serviceAccountName: demo
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: demo
---
apiVersion: v1
kind: Service
metadata:
  name: demo
spec:
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: web
    port: 3000
    protocol: TCP
    targetPort: 3000
  selector:
    demo: demo01
  sessionAffinity: None
  type: ClusterIP
---
# Enable this resource to deploy a containerized Redis Cache and have Radius provide connection details to the application:
# apiVersion: radapp.io/v1alpha3
# kind: Recipe
# metadata:
#   name: db
# spec:
#   environment: 'demos'
#   type: Applications.Datastores/redisCaches
